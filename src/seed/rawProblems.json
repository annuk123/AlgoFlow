[
{
  "id": 1,
  "slug": "two-sum",
  "title": "1. Two Sum",
  "tags": ["HashMap", "Brute Force"],
  "topic": ["Array"],
  "difficulty": "Easy",
  "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
"constraints": [
  "2 ≤ nums.length ≤ 10⁴",
  "−10⁹ ≤ nums[i] ≤ 10⁹",
  "−10⁹ ≤ target ≤ 10⁹",
  "Only one valid answer exists."
],
  "sampleInput": {
    "nums": [2, 7, 11, 15],
    "target": 9
  },
  "sampleOutput": [0, 1]
},
  {
    "id": 2,
    "slug": "add-two-numbers",
    "title": "2. Add Two Numbers",
    "tags": ["Linked List", "Math", "Recursion"],
    "topic": ["Linked List", "Math", "Recursion"],
    "difficulty": "Medium",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return it as a linked list.\n\n You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100]",
      "0 <= Node.val <= 9",
      "It is guaranteed that the list represents a number that does not have leading zeros."
    ],
    "sampleInput": {
      "l1": [2, 4, 3],
      "l2": [5, 6, 4]
    },
    "sampleOutput": [7, 0, 8]
  },
  {
    "id": 3,
    "slug": "3-longest-substring-without-repeating-characters",
    "title": "3. Longest Substring Without Repeating Characters",
    "tags": ["HashMap", "Sliding Window"],
    "topic": ["String", "Sliding Window"],
    "difficulty": "Medium",
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10⁴",
      "'s' consists of English letters, digits, symbols and spaces."
    ],
    "sampleInput": {
      "s": "abcabcbb"
    },
    "sampleOutput": 3
  },
  {
    "id": 4,
    "slug": "4-median-of-two-sorted-arrays",
    "title": "4. Median of Two Sorted Arrays",
    "tags": ["Binary Search", "Divide and Conquer"],
    "topic": ["Array", "Binary Search"],
    "difficulty": "Hard",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be O(log (m+n)).",
    "constraints": [
      "nums1.length == m",
      "nums2.length == n",
      "0 <= m <= 1000",
      "0 <= n <= 1000",
      "-10⁶ <= nums1[i], nums2[i] <= 10⁶"
    ],
    "sampleInput": {
      "nums1": [1, 3],
      "nums2": [2]
    },
    "sampleOutput": 2.0
  },
  {
    "id": 5,
    "slug": "5-longest-palindromic-substring",
    "title": "5. Longest Palindromic Substring",
    "tags": ["Dynamic Programming", "String"],
    "topic": ["String", "Dynamic Programming"],
    "difficulty": "Medium",
    "description": "Given a string s, return the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "sampleInput": {
      "s": "babad"
    },
    "sampleOutput": "bab"
  },
  {
    "id": 6,
    "slug": "6-zigzag-conversion",
    "title": "6. Zigzag Conversion",
    "tags": ["String", "Simulation"],
    "topic": ["String"],
    "difficulty": "Medium",
    "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\".\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string s, int numRows);\n\nExample 1:\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of English letters (lower-case, upper-case), digits, and symbols.",
      "1 <= numRows <= 1000"
    ],
    "sampleInput": {
      "s": "PAYPALISHIRING",
      "numRows": 3
    },
    "sampleOutput": "PAHNAPLSIIGYIR"
  },
  {
    "id": 7,
    "slug": "7-reverse-integer",
    "title": "7. Reverse Integer",
    "tags": ["Math", "String"],
    "topic": ["Math"],
    "difficulty": "Medium",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2³¹, 2³¹ - 1], then return 0.",
    "constraints": [
      "-2³¹ <= x <= 2³¹ - 1"
    ],
    "sampleInput": {
      "x": 123
    },
    "sampleOutput": 321
  },
  {
    "id": 8,
    "slug": "8-string-to-integer-atoi",
    "title": "8. String to Integer (atoi)",
    "tags": ["String", "Math"],
    "topic": ["String"],
    "difficulty": "Medium",
    "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n\nThe algorithm for myAtoi(string s) is as follows:\n1. Read in and ignore any leading whitespace.\n2. Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4. Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n5. If the integer is out of the 32-bit signed integer range [-2³¹, 2³¹ - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2³¹ should be clamped to -2³¹, and integers greater than 2³¹ - 1 should be clamped to 2³¹ - 1.\n6. Return the integer as the final result.",
    "constraints": [
      "0 <= s.length <= 200",
      "s consists of English letters (lower-case, upper-case), digits, ' ', '+', '-', and '.'",
      "The string is intended to be a valid integer."
    ],
    "sampleInput": {
      "s": "42"
    },
    "sampleOutput": 42
  },
  {
    "id": 9,
    "slug": "9-palindrome-number",
    "title": "9. Palindrome Number",
    "tags": ["Math"],
    "topic": ["Math"],
    "difficulty": "Easy",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.\n\nAn integer is a palindrome when it reads the same backward as forward.\n\nFor example, 121 is a palindrome while 123 is not.",
    "constraints": [
      "-2³¹ <= x <= 2³¹ - 1"
    ],
    "sampleInput": {
      "x": 121
    },
    "sampleOutput": true
  },
  {
    "id": 10,
    "slug": "10-regular-expression-matching",
    "title": "10. Regular Expression Matching",
    "tags": ["Dynamic Programming", "String"],
    "topic": ["String", "Dynamic Programming"],
    "difficulty": "Hard",
    "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*'.\n\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).",
    "constraints": [
      "1 <= s.length <= 20",
      "1 <= p.length <= 20",
      "'s' contains only lowercase English letters.",
      "'p' contains only lowercase English letters, '.', and '*'."
    ],
    "sampleInput": {
      "s": "aab",
      "p": "c*a*b"
    },
    "sampleOutput": true
  },
  {
    "id": 11,
    "slug": "11-container-with-most-water",
    "title": "11. Container With Most Water",
    "tags": ["Two Pointers", "Greedy"],
    "topic": ["Array", "Two Pointers"],
    "difficulty": "Medium",
    "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.",
    "constraints": [
      "n == height.length",
      "2 <= n <= 10⁵",
      "0 <= height[i] <= 10⁴"
    ],
    "sampleInput": {
      "height": [1,8,6,2,5,4,8,3,7]
    },
    "sampleOutput": 49
  },
  {
    "id": 12,
    "slug": "12-integer-to-roman",
    "title": "12. Integer to Roman",
    "tags": ["Math", "String"],
    "topic": ["Math", "String"],
    "difficulty": "Medium",
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nFor example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n- I can be placed before V (5) and X (10) to make 4 and 9.\n- X can be placed before L (50) and C (100) to make 40 and 90.\n- C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.",
    "constraints": [
      "1 <= num <= 3999"
    ],
    "sampleInput": {
      "num": 58
    },
    "sampleOutput": "LVIII"
  },
  {
    "id": 13,
    "slug": "13-roman-to-integer",
    "title": "13. Roman to Integer",
    "tags": ["Math", "String"],
    "topic": ["Math", "String"],
    "difficulty": "Easy",
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nFor example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n- I can be placed before V (5) and X (10) to make 4 and 9.\n- X can be placed before L (50) and C (100) to make 40 and 90.\n- C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.",
    "constraints": [
      "1 <= s.length <= 15",
      "'s' contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').",
      "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
    ],
    "sampleInput": {
      "s": "III"
    },
    "sampleOutput": 3
  },
  {
    "id": 14,
    "slug": "14-longest-common-prefix",
    "title": "14. Longest Common Prefix",
    "tags": ["String"],
    "topic": ["String"],
    "difficulty": "Easy",
    "description": "Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "'strs[i]' consists of only lower-case English letters."
    ],
    "sampleInput": {
      "strs": ["flower", "flow", "flight"]
    },
    "sampleOutput": "fl"
  },
  {
    "id": 15,
    "slug": "15-3sum",
    "title": "15. 3Sum",
    "tags": ["Array", "Two Pointers"],
    "topic": ["Array", "Two Pointers"],
    "difficulty": "Medium",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10⁵ <= nums[i] <= 10⁵"
    ],
    "sampleInput": {
      "nums": [-1, 0, 1, 2, -1, -4]
    },
    "sampleOutput": [[-1,-1,2],[-1,0,1]]
  },
  {
    "id": 16,
    "slug": "16-3sum-closest",
    "title": "16. 3Sum Closest",
    "tags": ["Array", "Two Pointers"],
    "topic": ["Array", "Two Pointers"],
    "difficulty": "Medium",
    "description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n\nReturn the sum of the three integers. You may assume that each input would have exactly one solution.",
    "constraints": [
      "3 <= nums.length <= 10⁴",
      "-10⁴ <= nums[i] <= 10⁴",
      "-10⁴ <= target <= 10⁴"
    ],
    "sampleInput": {
      "nums": [-1,2,1,-4],
      "target": 1
    },
    "sampleOutput": 2
  },
  {
    "id": 17,
    "slug": "17-letter-combinations-of-a-phone-number",
    "title": "17. Letter Combinations of a Phone Number",
    "tags": ["Backtracking", "String"],
    "topic": ["String", "Backtracking"],
    "difficulty": "Medium",
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
    "constraints": [
      "0 <= digits.length <= 4",
      "'digits' consists of digits from 2 to 9."
    ],
    "sampleInput": {
      "digits": "23"
    },
    "sampleOutput": ["ad","ae","af","bd","be","bf","cd","ce","cf"]
  },
  {
    "id": 18,
    "slug": "18-4sum",
    "title": "18. 4Sum",
    "tags": ["Array", "HashMap", "Two Pointers"],
    "topic": ["Array", "HashMap", "Two Pointers"],
    "difficulty": "Medium",
    "description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n- 0 <= a, b, c, d < n\n- a, b, c, and d are distinct.\n- nums[a] + nums[b] + nums[c] + nums[d] == target\n\nYou may return the answer in any order.",
    "constraints": [
      "1 <= n <= 200",
      "-10⁹ <= nums[i] <= 10⁹",
      "-10⁹ <= target <= 10⁹"
    ],
    "sampleInput": {
      "nums": [1,0,-1,0,-2,2],
      "target": 0
    },
    "sampleOutput": [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
  },
  {
    "id": 19,
    "slug": "19-remove-nth-node-from-end-of-list",
    "title": "19. Remove Nth Node From End of List",
    "tags": ["Linked List", "Two Pointers"],
    "topic": ["Linked List", "Two Pointers"],
    "difficulty": "Medium",
    "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
    "constraints": [
      "The number of nodes in the list is sz.",
      "1 <= sz <= 30",
      "0 <= Node.val <= 100",
      "1 <= n <= sz"
    ],
    "sampleInput": {
      "head": [1,2,3,4,5],
      "n": 2
    },
    "sampleOutput": [1,2,3,5]
  },
  {
    "id": 20,
    "slug": "20-valid-parentheses",
    "title": "20. Valid Parentheses",
    "tags": ["Stack", "String"],
    "topic": ["String", "Stack"],
    "difficulty": "Easy",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n- Open brackets must be closed by the same type of brackets.\n- Open brackets must be closed in the correct order.",
    "constraints": [
      "1 <= s.length <= 10⁴",
      "'s' consists of parentheses only."
    ],
    "sampleInput": {
      "s": "()[]{}"
    },
    "sampleOutput": true
  },
  {
    "id": 21,
    "slug": "21-merge-two-sorted-lists",
    "title": "21. Merge Two Sorted Lists",
    "tags": ["Linked List", "Recursion"],
    "topic": ["Linked List"],
    "difficulty": "Easy",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.",
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50]",
      "-100 <= Node.val <= 100"
    ],
    "sampleInput": {
      "l1": [1,2,4],
      "l2": [1,3,4]
    },
    "sampleOutput": [1,1,2,3,4,4]
  },
  {
    "id": 22,
    "slug": "22-generate-parentheses",
    "title": "22. Generate Parentheses",
    "tags": ["Backtracking", "String"],
    "topic": ["String", "Backtracking"],
    "difficulty": "Medium",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "sampleInput": {
      "n": 3
    },
    "sampleOutput": ["((()))","(()())","(())()","()(())","()()()"]
  },
  {
    "id": 23,
    "slug": "23-merge-k-sorted-lists",
    "title": "23. Merge k Sorted Lists",
    "tags": ["Linked List", "Divide and Conquer"],
    "topic": ["Linked List", "Divide and Conquer"],
    "difficulty": "Hard",
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.",
    "constraints": [
      "k == lists.length",
      "0 <= k <= 10⁴",
      "-10⁴ <= Node.val <= 10⁴"
    ],
    "sampleInput": {
      "lists": [[1,4,5],[1,3,4],[2,6]]
    },
    "sampleOutput": [1,1,2,3,4,4,5,6]
  },
  {
    "id": 24,
    "slug": "24-swap-nodes-in-pairs",
    "title": "24. Swap Nodes in Pairs",
    "tags": ["Linked List", "Recursion"],
    "topic": ["Linked List"],
    "difficulty": "Medium",
    "description": "Given a linked list, swap every two adjacent nodes and return its head.\n\nYou may not modify the values in the list's nodes, only nodes themselves may be changed.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 100]",
      "-100 <= Node.val <= 100"
    ],
    "sampleInput": {
      "head": [1,2,3,4]
    },
    "sampleOutput": [2,1,4,3]
  },
  {
    "id": 25,
    "slug": "25-reverse-nodes-in-k-group",
    "title": "25. Reverse Nodes in k-Group",
    "tags": ["Linked List", "Recursion"],
    "topic": ["Linked List"],
    "difficulty": "Hard",
    "description": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\n\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000]",
      "-1000 <= Node.val <= 1000",
      "1 <= k <= 5000"
    ],
    "sampleInput": {
      "head": [1,2,3,4,5],
      "k": 2
    },
    "sampleOutput": [2,1,4,3,5]
  },
  {
    "id": 26,
    "slug": "26-remove-duplicates-from-sorted-array",
    "title": "26. Remove Duplicates from Sorted Array",
    "tags": ["Array", "Two Pointers"],
    "topic": ["Array", "Two Pointers"],
    "difficulty": "Easy",
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.",
    "constraints": [
      "1 <= nums.length <= 3 * 10⁴",
      "-100 <= nums[i] <= 100",
      "nums is sorted in non-decreasing order."
    ],
    "sampleInput": {
      "nums": [1,1,2]
    },
    "sampleOutput": [1,2]
  },
  {
    "id": 27,
    "slug": "27-remove-element",
    "title": "27. Remove Element",
    "tags": ["Array", "Two Pointers"],
    "topic": ["Array", "Two Pointers"],
    "difficulty": "Easy",
    "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.",
    "constraints": [
      "0 <= nums.length <= 100",
      "-100 <= nums[i] <= 100",
      "-100 <= val <= 100"
    ],
    "sampleInput": {
      "nums": [3,2,2,3],
      "val": 3
    },
    "sampleOutput": [2,2]
  },
  {
    "id": 28,
    "slug": "28-implement-strstr",
    "title": "28. Implement strStr()",
    "tags": ["String"],
    "topic": ["String"],
    "difficulty": "Easy",
    "description": "Implement strStr() function.\n\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "constraints": [
      "0 <= haystack.length, needle.length <= 5 * 10⁴",
      "'haystack' and 'needle' consist of only lower-case English letters."
    ],
    "sampleInput": {
      "haystack": "hello",
      "needle": "ll"
    },
    "sampleOutput": 2
  },
  {
    "id": 29,
    "slug": "29-divide-two-integers",
    "title": "29. Divide Two Integers",
    "tags": ["Math", "Bit Manipulation"],
    "topic": ["Math"],
    "difficulty": "Medium",
    "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.",
    "constraints": [
      "-2³¹ <= dividend, divisor <= 2³¹ - 1",
      "divisor != 0"
    ],
    "sampleInput": {
      "dividend": 10,
      "divisor": 3
    },
    "sampleOutput": 3
  },
  {
    "id": 30,
    "slug": "30-substring-with-concatenation-of-all-words",
    "title": "30. Substring with Concatenation of All Words",
    "tags": ["HashMap", "String", "Sliding Window"],
    "topic": ["String", "Sliding Window"],
    "difficulty": "Hard",
    "description": "You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, without any intervening characters.\n\nYou can return the answer in any order.",
    "constraints": [
      "1 <= s.length <= 10⁴",
      "1 <= words.length <= 100",
      "1 <= words[i].length <= 100",
      "'s' and 'words[i]' consist of lower-case English letters."
    ],
    "sampleInput": {
      "s": "barfoothefoobarman",
      "words": ["foo","bar"]
    },
    "sampleOutput": [0,9]
  },
  {
    "id": 31,
    "slug": "31-next-permutation",
    "title": "31. Next Permutation",
    "tags": ["Array", "Two Pointers"],
    "topic": ["Array", "Two Pointers"],
    "difficulty": "Medium",
    "description": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The replacement must be in-place and use only constant extra memory.",
    "constraints": [
      "1 <= nums.length <= 100",
      "-10⁹ <= nums[i] <= 10⁹"
    ],
    "sampleInput": {
      "nums": [1,2,3]
    },
    "sampleOutput": [1,3,2]
  },
  {
    "id": 32,
    "slug": "32-longest-valid-parentheses",
    "title": "32. Longest Valid Parentheses",
    "tags": ["Stack", "Dynamic Programming"],
    "topic": ["String", "Stack"],
    "difficulty": "Hard",
    "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
    "constraints": [
      "0 <= s.length <= 3 * 10⁴",
      "'s' consists of '(' and ')'."
    ],
    "sampleInput": {
      "s": "(()"
    },
    "sampleOutput": 2
  },
  {
    "id": 33,
    "slug": "33-search-in-rotated-sorted-array",
    "title": "33. Search in Rotated Sorted Array",
    "tags": ["Array", "Binary Search"],
    "topic": ["Array", "Binary Search"],
    "difficulty": "Medium",
    "description": "You are given an integer array nums sorted in ascending order, and an integer target.\n\nSuppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\n\nIf target is found in the array return its index, otherwise return -1.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "-10⁴ <= nums[i] <= 10⁴",
      "All integers in nums are unique.",
      "nums is guaranteed to be rotated at some pivot.",
      "-10⁴ <= target <= 10⁴"
    ],
    "sampleInput": {
      "nums": [4,5,6,7,0,1,2],
      "target": 0
    },
    "sampleOutput": 4
  },
  {
    "id": 34,
    "slug": "34-find-first-and-last-position-of-element-in-sorted-array",
    "title": "34. Find First and Last Position of Element in Sorted Array",
    "tags": ["Array", "Binary Search"],
    "topic": ["Array", "Binary Search"],
    "difficulty": "Medium",
    "description": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n\nIf target is not found in the array, return [-1,-1].\n\nYou must write an algorithm with O(log n) runtime complexity.",
    "constraints": [
      "0 <= nums.length <= 10⁵",
      "-10⁹ <= nums[i] <= 10⁹",
      "-10⁹ <= target <= 10⁹"
    ],
    "sampleInput": {
      "nums": [5,7,7,8,8,10],
      "target": 8
    },
    "sampleOutput": [3,4]
  },
  {
    "id": 35,
    "slug": "35-search-insert-position",
    "title": "35. Search Insert Position",
    "tags": ["Array", "Binary Search"],
    "topic": ["Array", "Binary Search"],
    "difficulty": "Easy",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
    "constraints": [
      "1 <= nums.length <= 10⁴",
      "-10⁴ <= nums[i] <= 10⁴",
      "-10⁴ <= target <= 10⁴"
    ],
    "sampleInput": {
      "nums": [1,3,5,6],
      "target": 5
    },
    "sampleOutput": 2
  },
  {
    "id": 36,
    "slug": "36-valid-sudoku",
    "title": "36. Valid Sudoku",
    "tags": ["HashMap", "Array"],
    "topic": ["Array", "HashMap"],
    "difficulty": "Medium",
    "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n- Each row must contain the digits 1-9 without repetition.\n- Each column must contain the digits 1-9 without repetition.\n- Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.",
    "constraints": [
      "'board' is a 9 x 9 array of characters.",
      "'board[i][j]' is either a digit from '1' to '9' or '.' representing an empty cell."
    ],
    "sampleInput": {
      "board": [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
      ]
    },
    "sampleOutput": true
  },
  {
    "id": 37,
    "slug": "37-sudoku-solver",
    "title": "37. Sudoku Solver",
    "tags": ["Backtracking", "Array"],
    "topic": ["Array", "Backtracking"],
    "difficulty": "Hard",
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n- Each of the digits 1-9 must occur exactly once in each row.\n- Each of the digits 1-9 must occur exactly once in each column.\n- Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.",
    "constraints": [
      "'board' is a 9 x 9 array of characters.",
      "'board[i][j]' is either a digit from '1' to '9' or '.' representing an empty cell."
    ],
    "sampleInput": {
      "board": [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
      ]
    },
    "sampleOutput": [
      ["5","3","4","6","7","8","9","1","2"],
      ["6","7","2","1","9","5","3","4","8"],
      ["1","9","8","3","4","2","5","6","7"],
      ["8","5","9","7","6","1","4","2","3"],
      ["4","2","6","8","5","3","7","9","1"],
      ["7","1","3","9","2","4","8","5","6"],
      ["9","6","1","5","3","7","2","8","4"],
      ["2","8","7","4","1","9","6","3","5"],
      ["3","4","5","2","8","6","1","7","9"],
      ["5","3","4","6","7","8","9","1","2"],
      ["6","7","2","1","9","5","3","4","8"],
      ["1","9","8","3","4","2","5","6","7"],
      ["8","5","9","7","6","1","4","2","3"],
      ["4","2","6","8","5","3","7","9","1"],
      ["7","1","3","9","2","4","8","5","6"],
      ["9","6","1","5","3","7","2","8","4"],
      ["2","8","7","4","1","9","6","3","5"],
      ["3","4","5","2","8","6","1","7","9"]
    ]
  },
  {
    "id": 38,
    "slug": "38-count-and-say",
    "title": "38. Count and Say",
    "tags": ["String"],
    "topic": ["String"],
    "difficulty": "Medium",
    "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n- countAndSay(1) = \"1\"\n- countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n\nTo generate the next term in the sequence, we read the previous term and count the number of digits in groups of the same digit, then say the digit followed by the count.\n\nFor example, the sequence is as follows:\n- 1\n- 11 (one 1)\n- 21 (two 1s)\n- 1211 (one 2, then one 1)\n- 111221 (one 1, one 2, then two 1s)\n- 312211 (three 1s, two 2s, then one 1)\n\nGiven an integer n, return the nth term of the count-and-say sequence.",
    "constraints": [
      "1 <= n <= 30"
    ],
    "sampleInput": {
      "n": 4
    },
    "sampleOutput": "1211"
  },
  {
    "id": 39,
    "slug": "39-combination-sum",
    "title": "39. Combination Sum",
    "tags": ["Array", "Backtracking"],
    "topic": ["Array", "Backtracking"],
    "difficulty": "Medium",
    "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.\n\nYou may return the combinations in any order.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "-10⁴ <= candidates[i] <= 10⁴",
      "-10⁴ <= target <= 10⁴",
      "All elements of candidates are distinct."
    ],
    "sampleInput": {
      "candidates": [2,3,6,7],
      "target": 7
    },
    "sampleOutput": [[2,2,3],[7]]
  },
  {
    "id": 40,
    "slug": "40-combination-sum-ii",
    "title": "40. Combination Sum II",
    "tags": ["Array", "Backtracking"],
    "topic": ["Array", "Backtracking"],
    "difficulty": "Medium",
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n\nEach number in candidates may only be used once in the combination.\n\nReturn the combinations in any order.",
    "constraints": [
      "1 <= candidates.length <= 100",
      "-10⁴ <= candidates[i] <= 10⁴",
      "-10⁴ <= target <= 10⁴"
    ],
    "sampleInput": {
      "candidates": [10,1,2,7,6,1,5],
      "target": 8
    },
    "sampleOutput": [[1,1,6],[1,2,5],[2,6],[1,7]]
  },
  {
    "id": 41,
    "slug": "41-first-missing-positive",
    "title": "41. First Missing Positive",
    "tags": ["Array", "HashMap"],
    "topic": ["Array", "HashMap"],
    "difficulty": "Hard",
    "description": "Given an unsorted integer array nums, return the smallest missing positive integer.\n\nYou must implement an algorithm that runs in O(n) time and uses O(1) extra space.",
    "constraints": [
      "1 <= nums.length <= 5 * 10⁴",
      "-2³¹ <= nums[i] <= 2³¹ - 1"
    ],
    "sampleInput": {
      "nums": [1,2,0]
    },
    "sampleOutput": 3
  },
  {
    "id": 42,
    "slug": "42-trapping-rain-water",
    "title": "42. Trapping Rain Water",
    "tags": ["Array", "Two Pointers", "Dynamic Programming"],
    "topic": ["Array", "Two Pointers"],
    "difficulty": "Hard",
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    "constraints": [
      "n == height.length",
      "0 <= n <= 3 * 10⁴",
      "-10⁵ <= height[i] <= 10⁵"
    ],
    "sampleInput": {
      "height": [0,1,0,2,1,0,1,3,2,1,2,1]
    },
    "sampleOutput": 6
  },
  {
    "id": 43,
    "slug": "43-multiply-strings",
    "title": "43. Multiply Strings",
    "tags": ["Math", "String"],
    "topic": ["Math", "String"],
    "difficulty": "Medium",
    "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.",
    "constraints": [
      "1 <= num1.length, num2.length <= 200",
      "'num1' and 'num2' consist of digits only.",
      "'num1' and 'num2' do not have any leading zeros except for the zero itself."
    ],
    "sampleInput": {
      "num1": "123",
      "num2": "456"
    },
    "sampleOutput": "56088"
  },
  {
    "id": 44,
    "slug": "44-wildcard-matching",
    "title": "44. Wildcard Matching",
    "tags": ["String", "Dynamic Programming"],
    "topic": ["String", "Dynamic Programming"],
    "difficulty": "Hard",
    "description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n\n- '?' Matches any single character.\n- '*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).",
    "constraints": [
      "0 <= s.length, p.length <= 2000",
      "'s' contains only lower-case English letters.",
      "'p' contains only lower-case English letters, '?' or '*'.",
      "It is guaranteed that the input string and the pattern are both non-empty."
    ],
    "sampleInput": {
      "s": "aa",
      "p": "*"
    },
    "sampleOutput": true
  },
  {
    "id": 45,
    "slug": "45-jump-game-ii",
    "title": "45. Jump Game II",
    "tags": ["Array", "Greedy"],
    "topic": ["Array", "Greedy"],
    "difficulty": "Medium",
    "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where: 0 < j <= nums[i] and i + j < n.\n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].",
    "constraints": [
      "1 <= n == nums.length <= 10⁴",
      "0 <= nums[i] <= 1000"
    ],
    "sampleInput": {
      "nums": [2,3,1,1,4]
    },
    "sampleOutput": 2
  },
  {
    "id": 46,
    "slug": "46-permutations",
    "title": "46. Permutations",
    "tags": ["Array", "Backtracking"],
    "topic": ["Array", "Backtracking"],
    "difficulty": "Medium",
    "description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.",
    "constraints": [
      "1 <= nums.length <= 6",
      "-10 <= nums[i] <= 10",
      "All integers in nums are unique."
    ],
    "sampleInput": {
      "nums": [1,2,3]
    },
    "sampleOutput": [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
  },
  {
    "id": 47,
    "slug": "47-permutations-ii",
    "title": "47. Permutations II",
    "tags": ["Array", "Backtracking"],
    "topic": ["Array", "Backtracking"],
    "difficulty": "Medium",
    "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",
    "constraints": [
      "1 <= nums.length <= 8",
      "-10 <= nums[i] <= 10"
    ],
    "sampleInput": {
      "nums": [1,1,2]
    },
    "sampleOutput": [[1,1,2],[1,2,1],[2,1,1]]
  },
  {
    "id": 48,
    "slug": "48-rotate-image",
    "title": "48. Rotate Image",
    "tags": ["Array", "Matrix"],
    "topic": ["Array", "Matrix"],
    "difficulty": "Medium",
    "description": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
    "constraints": [
      "n == matrix.length",
      "n == matrix[i].length",
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "sampleInput": {
      "matrix": [
        [1,2,3],
        [4,5,6],
        [7,8,9]
      ]
    },
    "sampleOutput": [
      [7,4,1],
      [8,5,2],
      [9,6,3]
    ]
  },
  {
    "id": 49,
    "slug": "49-group-anagrams",
    "title": "49. Group Anagrams",
    "tags": ["HashMap", "String"],
    "topic": ["String", "HashMap"],
    "difficulty": "Medium",
    "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "constraints": [
      "1 <= strs.length <= 10⁴",
      "0 <= strs[i].length <= 100",
      "'strs[i]' consists of lower-case English letters."
    ],
    "sampleInput": {
      "strs": ["eat","tea","tan","ate","nat","bat"]
    },
    "sampleOutput": [["bat"],["nat","tan"],["ate","eat","tea"]]
  },
  {
    "id": 50,
    "slug": "50-powx-n",
    "title": "50. Pow(x, n)",
    "tags": ["Math", "Recursion"],
    "topic": ["Math", "Recursion"],
    "difficulty": "Medium",
    "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xⁿ).\n\nThe function should support both positive and negative values of n.",
    "constraints": [
      "-100.0 < x < 100.0",
      "-2³¹ <= n <= 2³¹ - 1"
    ],
    "sampleInput": {
      "x": 2.00000,
      "n": 10
    },
    "sampleOutput": 1024.00000
  }
]